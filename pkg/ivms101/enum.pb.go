// Code generated by protoc-gen-go. DO NOT EDIT.
// source: enum.proto

package ivms101

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Definition: A single value corresponding to the nature of name being adopted.
type NaturalPersonNameTypeCode int32

const (
	// Alias name
	// A name other than the legal name by which a natural person is also known.
	NaturalPersonNameTypeCode_NATURAL_PERSON_NAME_TYPE_CODE_ALIA NaturalPersonNameTypeCode = 0
	// Name at birth
	// The name given to a natural person at birth.
	NaturalPersonNameTypeCode_NATURAL_PERSON_NAME_TYPE_CODE_BIRT NaturalPersonNameTypeCode = 1
	// Maiden name
	// The original name of a natural person who has changed their name after marriage.
	NaturalPersonNameTypeCode_NATURAL_PERSON_NAME_TYPE_CODE_MAID NaturalPersonNameTypeCode = 2
	// Legal name
	// Identifies a natural person for legal, official or administrative purposes.
	NaturalPersonNameTypeCode_NATURAL_PERSON_NAME_TYPE_CODE_LEGL NaturalPersonNameTypeCode = 3
	// Unspecified
	// A name by which a natural person may be known but which cannot otherwise be
	// categorized or the category of which the sender is unable to determine.
	NaturalPersonNameTypeCode_NATURAL_PERSON_NAME_TYPE_CODE_MISC NaturalPersonNameTypeCode = 4
)

var NaturalPersonNameTypeCode_name = map[int32]string{
	0: "NATURAL_PERSON_NAME_TYPE_CODE_ALIA",
	1: "NATURAL_PERSON_NAME_TYPE_CODE_BIRT",
	2: "NATURAL_PERSON_NAME_TYPE_CODE_MAID",
	3: "NATURAL_PERSON_NAME_TYPE_CODE_LEGL",
	4: "NATURAL_PERSON_NAME_TYPE_CODE_MISC",
}

var NaturalPersonNameTypeCode_value = map[string]int32{
	"NATURAL_PERSON_NAME_TYPE_CODE_ALIA": 0,
	"NATURAL_PERSON_NAME_TYPE_CODE_BIRT": 1,
	"NATURAL_PERSON_NAME_TYPE_CODE_MAID": 2,
	"NATURAL_PERSON_NAME_TYPE_CODE_LEGL": 3,
	"NATURAL_PERSON_NAME_TYPE_CODE_MISC": 4,
}

func (x NaturalPersonNameTypeCode) String() string {
	return proto.EnumName(NaturalPersonNameTypeCode_name, int32(x))
}

func (NaturalPersonNameTypeCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_13a9f1b5947140c8, []int{0}
}

//  Definition: A single value corresponding to the nature of name being specified
// for the legal person.
type LegalPersonNameTypeCode int32

const (
	// Legal name
	// Official name under which an organisation is registered.
	LegalPersonNameTypeCode_LEGAL_PERSON_NAME_TYPE_CODE_LEGL LegalPersonNameTypeCode = 0
	// Short name
	// Specifies the short name of the organisation.
	LegalPersonNameTypeCode_LEGAL_PERSON_NAME_TYPE_CODE_SHRT LegalPersonNameTypeCode = 1
	// Trading name
	// Name used by a business for commercial purposes, although its registered legal
	// name, used for contracts and other formal situations, may be another.
	LegalPersonNameTypeCode_LEGAL_PERSON_NAME_TYPE_CODE_TRAD LegalPersonNameTypeCode = 2
)

var LegalPersonNameTypeCode_name = map[int32]string{
	0: "LEGAL_PERSON_NAME_TYPE_CODE_LEGL",
	1: "LEGAL_PERSON_NAME_TYPE_CODE_SHRT",
	2: "LEGAL_PERSON_NAME_TYPE_CODE_TRAD",
}

var LegalPersonNameTypeCode_value = map[string]int32{
	"LEGAL_PERSON_NAME_TYPE_CODE_LEGL": 0,
	"LEGAL_PERSON_NAME_TYPE_CODE_SHRT": 1,
	"LEGAL_PERSON_NAME_TYPE_CODE_TRAD": 2,
}

func (x LegalPersonNameTypeCode) String() string {
	return proto.EnumName(LegalPersonNameTypeCode_name, int32(x))
}

func (LegalPersonNameTypeCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_13a9f1b5947140c8, []int{1}
}

// Definition: Identifies the nature of the address.
type AddressTypeCode int32

const (
	// Residential
	// Address is the home address.
	AddressTypeCode_ADDRESS_TYPE_CODE_HOME AddressTypeCode = 0
	// Business
	// Address is the business address.
	AddressTypeCode_ADDRESS_TYPE_CODE_BIZZ AddressTypeCode = 1
	// Geographic
	// Address is the unspecified physical (geographical) address suitable for
	// identification of the natural or legal person.
	AddressTypeCode_ADDRESS_TYPE_CODE_GEOG AddressTypeCode = 2
)

var AddressTypeCode_name = map[int32]string{
	0: "ADDRESS_TYPE_CODE_HOME",
	1: "ADDRESS_TYPE_CODE_BIZZ",
	2: "ADDRESS_TYPE_CODE_GEOG",
}

var AddressTypeCode_value = map[string]int32{
	"ADDRESS_TYPE_CODE_HOME": 0,
	"ADDRESS_TYPE_CODE_BIZZ": 1,
	"ADDRESS_TYPE_CODE_GEOG": 2,
}

func (x AddressTypeCode) String() string {
	return proto.EnumName(AddressTypeCode_name, int32(x))
}

func (AddressTypeCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_13a9f1b5947140c8, []int{2}
}

// Definition: Identifies the national identification type.
// NationalIdentifierTypeCode applies a restriction over the codes present in ISO20022
// datatype ‘TypeOfIdentification4Code’.
type NationalIdentifierTypeCode int32

const (
	// Alien registration number
	// Number assigned by a government agency to identify foreign nationals.
	NationalIdentifierTypeCode_NATIONAL_IDENTIFIER_TYPE_CODE_ARNU NationalIdentifierTypeCode = 0
	// Passport number
	// Number assigned by a passport authority.
	NationalIdentifierTypeCode_NATIONAL_IDENTIFIER_TYPE_CODE_CCPT NationalIdentifierTypeCode = 1
	// Registration authority identifier
	// Identifier of a legal entity as maintained by a registration authority.
	NationalIdentifierTypeCode_NATIONAL_IDENTIFIER_TYPE_CODE_RAID NationalIdentifierTypeCode = 2
	// Driver license number
	// Number assigned to a driver's license.
	NationalIdentifierTypeCode_NATIONAL_IDENTIFIER_TYPE_CODE_DRLC NationalIdentifierTypeCode = 3
	// Foreign investment identity number
	// Number assigned to a foreign investor (other than the alien number).
	NationalIdentifierTypeCode_NATIONAL_IDENTIFIER_TYPE_CODE_FIIN NationalIdentifierTypeCode = 4
	// Tax identification number
	// Number assigned by a tax authority to an entity.
	NationalIdentifierTypeCode_NATIONAL_IDENTIFIER_TYPE_CODE_TXID NationalIdentifierTypeCode = 5
	// Social security number
	// Number assigned by a social security agency.
	NationalIdentifierTypeCode_NATIONAL_IDENTIFIER_TYPE_CODE_SOCS NationalIdentifierTypeCode = 6
	// Identity card number
	// Number assigned by a national authority to an identity card.
	NationalIdentifierTypeCode_NATIONAL_IDENTIFIER_TYPE_CODE_IDCD NationalIdentifierTypeCode = 7
	// Legal Entity Identifier
	// Legal Entity Identifier (LEI) assigned in accordance with ISO 17442.
	// The LEI is a 20-character, alpha-numeric code that enables clear and unique
	// identification of legal entities participating in financial transactions.
	NationalIdentifierTypeCode_NATIONAL_IDENTIFIER_TYPE_CODE_LEIX NationalIdentifierTypeCode = 8
	// Unspecified
	// A national identifier which may be known but which cannot otherwise be
	// categorized or the category of which the sender is unable to determine.
	NationalIdentifierTypeCode_NATIONAL_IDENTIFIER_TYPE_CODE_MISC NationalIdentifierTypeCode = 9
)

var NationalIdentifierTypeCode_name = map[int32]string{
	0: "NATIONAL_IDENTIFIER_TYPE_CODE_ARNU",
	1: "NATIONAL_IDENTIFIER_TYPE_CODE_CCPT",
	2: "NATIONAL_IDENTIFIER_TYPE_CODE_RAID",
	3: "NATIONAL_IDENTIFIER_TYPE_CODE_DRLC",
	4: "NATIONAL_IDENTIFIER_TYPE_CODE_FIIN",
	5: "NATIONAL_IDENTIFIER_TYPE_CODE_TXID",
	6: "NATIONAL_IDENTIFIER_TYPE_CODE_SOCS",
	7: "NATIONAL_IDENTIFIER_TYPE_CODE_IDCD",
	8: "NATIONAL_IDENTIFIER_TYPE_CODE_LEIX",
	9: "NATIONAL_IDENTIFIER_TYPE_CODE_MISC",
}

var NationalIdentifierTypeCode_value = map[string]int32{
	"NATIONAL_IDENTIFIER_TYPE_CODE_ARNU": 0,
	"NATIONAL_IDENTIFIER_TYPE_CODE_CCPT": 1,
	"NATIONAL_IDENTIFIER_TYPE_CODE_RAID": 2,
	"NATIONAL_IDENTIFIER_TYPE_CODE_DRLC": 3,
	"NATIONAL_IDENTIFIER_TYPE_CODE_FIIN": 4,
	"NATIONAL_IDENTIFIER_TYPE_CODE_TXID": 5,
	"NATIONAL_IDENTIFIER_TYPE_CODE_SOCS": 6,
	"NATIONAL_IDENTIFIER_TYPE_CODE_IDCD": 7,
	"NATIONAL_IDENTIFIER_TYPE_CODE_LEIX": 8,
	"NATIONAL_IDENTIFIER_TYPE_CODE_MISC": 9,
}

func (x NationalIdentifierTypeCode) String() string {
	return proto.EnumName(NationalIdentifierTypeCode_name, int32(x))
}

func (NationalIdentifierTypeCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_13a9f1b5947140c8, []int{3}
}

// Definition: Identifies the national script from which transliteration to Latin
// script is applied.
type TransliterationMethodCode int32

const (
	// Arabic (Arabic language)
	// ISO 233-2:1993
	TransliterationMethodCode_TRANSLITERATION_METHOD_CODE_ARAB TransliterationMethodCode = 0
	// Arabic (Persian language)
	// ISO 233-3:1999
	TransliterationMethodCode_TRANSLITERATION_METHOD_CODE_ARAN TransliterationMethodCode = 1
	// Armenian
	// ISO 9985:1996
	TransliterationMethodCode_TRANSLITERATION_METHOD_CODE_ARMN TransliterationMethodCode = 2
	// Cyrillic
	// ISO 9:1995
	TransliterationMethodCode_TRANSLITERATION_METHOD_CODE_CYRL TransliterationMethodCode = 3
	// Devanagari & related Indic
	// ISO 15919:2001
	TransliterationMethodCode_TRANSLITERATION_METHOD_CODE_DEVA TransliterationMethodCode = 4
	// Georgian
	// ISO 9984:1996
	TransliterationMethodCode_TRANSLITERATION_METHOD_CODE_GEOR TransliterationMethodCode = 5
	// Greek
	// ISO 843:1997
	TransliterationMethodCode_TRANSLITERATION_METHOD_CODE_GREK TransliterationMethodCode = 6
	// Han (Hanzi, Kanji, Hanja)
	// ISO 7098:2015
	TransliterationMethodCode_TRANSLITERATION_METHOD_CODE_HANI TransliterationMethodCode = 7
	// Hebrew
	// ISO 259-2:1994
	TransliterationMethodCode_TRANSLITERATION_METHOD_CODE_HEBR TransliterationMethodCode = 8
	// Kana
	// ISO 3602:1989
	TransliterationMethodCode_TRANSLITERATION_METHOD_CODE_KANA TransliterationMethodCode = 10
	// Korean
	// Revised Romanization of Korean
	TransliterationMethodCode_TRANSLITERATION_METHOD_CODE_KORE TransliterationMethodCode = 11
	// Thai
	// ISO 11940-2:2007
	TransliterationMethodCode_TRANSLITERATION_METHOD_CODE_THAI TransliterationMethodCode = 12
	// Script other than those listed above
	// Unspecified Standard
	TransliterationMethodCode_TRANSLITERATION_METHOD_CODE_OTHR TransliterationMethodCode = 13
)

var TransliterationMethodCode_name = map[int32]string{
	0:  "TRANSLITERATION_METHOD_CODE_ARAB",
	1:  "TRANSLITERATION_METHOD_CODE_ARAN",
	2:  "TRANSLITERATION_METHOD_CODE_ARMN",
	3:  "TRANSLITERATION_METHOD_CODE_CYRL",
	4:  "TRANSLITERATION_METHOD_CODE_DEVA",
	5:  "TRANSLITERATION_METHOD_CODE_GEOR",
	6:  "TRANSLITERATION_METHOD_CODE_GREK",
	7:  "TRANSLITERATION_METHOD_CODE_HANI",
	8:  "TRANSLITERATION_METHOD_CODE_HEBR",
	10: "TRANSLITERATION_METHOD_CODE_KANA",
	11: "TRANSLITERATION_METHOD_CODE_KORE",
	12: "TRANSLITERATION_METHOD_CODE_THAI",
	13: "TRANSLITERATION_METHOD_CODE_OTHR",
}

var TransliterationMethodCode_value = map[string]int32{
	"TRANSLITERATION_METHOD_CODE_ARAB": 0,
	"TRANSLITERATION_METHOD_CODE_ARAN": 1,
	"TRANSLITERATION_METHOD_CODE_ARMN": 2,
	"TRANSLITERATION_METHOD_CODE_CYRL": 3,
	"TRANSLITERATION_METHOD_CODE_DEVA": 4,
	"TRANSLITERATION_METHOD_CODE_GEOR": 5,
	"TRANSLITERATION_METHOD_CODE_GREK": 6,
	"TRANSLITERATION_METHOD_CODE_HANI": 7,
	"TRANSLITERATION_METHOD_CODE_HEBR": 8,
	"TRANSLITERATION_METHOD_CODE_KANA": 10,
	"TRANSLITERATION_METHOD_CODE_KORE": 11,
	"TRANSLITERATION_METHOD_CODE_THAI": 12,
	"TRANSLITERATION_METHOD_CODE_OTHR": 13,
}

func (x TransliterationMethodCode) String() string {
	return proto.EnumName(TransliterationMethodCode_name, int32(x))
}

func (TransliterationMethodCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_13a9f1b5947140c8, []int{4}
}

func init() {
	proto.RegisterEnum("ivms101.NaturalPersonNameTypeCode", NaturalPersonNameTypeCode_name, NaturalPersonNameTypeCode_value)
	proto.RegisterEnum("ivms101.LegalPersonNameTypeCode", LegalPersonNameTypeCode_name, LegalPersonNameTypeCode_value)
	proto.RegisterEnum("ivms101.AddressTypeCode", AddressTypeCode_name, AddressTypeCode_value)
	proto.RegisterEnum("ivms101.NationalIdentifierTypeCode", NationalIdentifierTypeCode_name, NationalIdentifierTypeCode_value)
	proto.RegisterEnum("ivms101.TransliterationMethodCode", TransliterationMethodCode_name, TransliterationMethodCode_value)
}

func init() { proto.RegisterFile("enum.proto", fileDescriptor_13a9f1b5947140c8) }

var fileDescriptor_13a9f1b5947140c8 = []byte{
	// 450 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0xd4, 0xd1, 0x6e, 0xd3, 0x3c,
	0x14, 0xc0, 0xf1, 0xb6, 0xeb, 0xda, 0xcd, 0xdf, 0x87, 0x38, 0xda, 0x05, 0x68, 0xbb, 0x42, 0x08,
	0x71, 0xd1, 0x0b, 0xc4, 0xc4, 0x13, 0x38, 0xf1, 0x59, 0x62, 0xcd, 0xb1, 0x2b, 0xc7, 0x43, 0x5b,
	0x6f, 0xa2, 0xa0, 0x18, 0x88, 0xd4, 0x26, 0x53, 0x92, 0x21, 0xf1, 0x08, 0x88, 0x57, 0xe1, 0xad,
	0x78, 0x11, 0x44, 0xa6, 0x96, 0x0a, 0x55, 0x39, 0x5c, 0xfb, 0x27, 0x27, 0xd6, 0xff, 0xd8, 0x8c,
	0xf9, 0xea, 0x61, 0xf3, 0xe6, 0xbe, 0xa9, 0xbb, 0xfa, 0x6c, 0x5e, 0x7e, 0xd9, 0xb4, 0x97, 0x6f,
	0x2f, 0x17, 0x3f, 0xc7, 0xec, 0x5c, 0xe7, 0xdd, 0x43, 0x93, 0xaf, 0x97, 0xbe, 0x69, 0xeb, 0x4a,
	0xe7, 0x1b, 0xef, 0xbe, 0xde, 0xfb, 0xb0, 0x2e, 0xfc, 0xd9, 0x6b, 0xf6, 0x52, 0x73, 0x77, 0x63,
	0xb9, 0xca, 0x96, 0x68, 0x53, 0xa3, 0x33, 0xcd, 0x13, 0xcc, 0xdc, 0xdd, 0x12, 0xb3, 0xd0, 0x08,
	0xcc, 0xb8, 0x92, 0x1c, 0x46, 0xb4, 0x0b, 0xa4, 0x75, 0x30, 0xa6, 0x5d, 0xc2, 0xa5, 0x80, 0x09,
	0xed, 0x14, 0x46, 0x0a, 0x8e, 0xfe, 0x61, 0x3f, 0x99, 0x86, 0x30, 0x5d, 0x7c, 0x1f, 0xb3, 0xe7,
	0xca, 0x7f, 0x3a, 0x78, 0xc6, 0x57, 0xec, 0x85, 0xc2, 0x68, 0xf8, 0x4b, 0x23, 0x4a, 0xa5, 0x71,
	0x7f, 0x3e, 0x42, 0x39, 0xcb, 0x05, 0x4c, 0x16, 0x9e, 0x3d, 0xe5, 0x45, 0xd1, 0xf8, 0xb6, 0xdd,
	0xfd, 0xc4, 0x05, 0x7b, 0xc6, 0x85, 0xb0, 0x98, 0xa6, 0x7b, 0x3c, 0x36, 0x09, 0xc2, 0xe8, 0xf0,
	0x5a, 0x20, 0x57, 0x2b, 0x18, 0x1f, 0x5e, 0x8b, 0xd0, 0x44, 0x30, 0x59, 0xfc, 0x38, 0x62, 0x17,
	0x3a, 0xef, 0xca, 0xba, 0xca, 0xd7, 0xb2, 0xf0, 0x55, 0x57, 0x7e, 0x2c, 0x7d, 0xf3, 0x57, 0x5b,
	0x69, 0x34, 0x57, 0x99, 0x14, 0xa8, 0x9d, 0xbc, 0x92, 0x68, 0xf7, 0xdb, 0x5a, 0x7d, 0xb3, 0x6b,
	0x3b, 0xe0, 0xc2, 0x70, 0xf9, 0xa7, 0xed, 0x80, 0xb3, 0xfb, 0x6d, 0x07, 0x9c, 0xb0, 0x2a, 0xdc,
	0xb5, 0x1d, 0x70, 0x57, 0x52, 0x6a, 0x98, 0xd2, 0xce, 0xdd, 0x4a, 0x01, 0xc7, 0xb4, 0x4b, 0x4d,
	0x98, 0xc2, 0x8c, 0x76, 0x52, 0x84, 0x02, 0xe6, 0xb4, 0x53, 0x28, 0x6f, 0xe1, 0x84, 0x76, 0xfd,
	0x8c, 0x9e, 0x2e, 0xbe, 0x4d, 0xd9, 0xb9, 0x6b, 0xf2, 0xaa, 0x5d, 0x97, 0x9d, 0x6f, 0xfa, 0x6e,
	0x89, 0xef, 0x3e, 0xd7, 0xc5, 0x76, 0x4a, 0x9d, 0xe5, 0x3a, 0x55, 0xd2, 0xa1, 0xed, 0xb7, 0xcb,
	0x12, 0x74, 0xb1, 0x11, 0xdb, 0x56, 0x3c, 0x78, 0x9c, 0x52, 0x42, 0xe9, 0xc7, 0x29, 0x1d, 0x56,
	0x89, 0x86, 0x09, 0xa5, 0xc2, 0x3b, 0xfb, 0xfb, 0x06, 0x12, 0x4a, 0xe0, 0x7b, 0x0e, 0x53, 0x4a,
	0x45, 0x68, 0x2c, 0x1c, 0x93, 0xca, 0xe2, 0x35, 0xcc, 0x28, 0x15, 0x73, 0x2d, 0x61, 0x4e, 0x2a,
	0x0c, 0x2c, 0x9c, 0x50, 0xea, 0x9a, 0x6b, 0x0e, 0x8c, 0x54, 0xc6, 0x22, 0xfc, 0x47, 0x29, 0x17,
	0x73, 0x09, 0xff, 0x53, 0xca, 0xb8, 0xd8, 0xc2, 0x93, 0xe0, 0x74, 0xb5, 0x7d, 0xa0, 0x3f, 0xcc,
	0xfa, 0x07, 0xfb, 0xdd, 0xaf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x54, 0xe8, 0x97, 0x23, 0xbe, 0x05,
	0x00, 0x00,
}
