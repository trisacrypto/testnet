// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1alpha1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// TRISANetworkClient is the client API for TRISANetwork service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TRISANetworkClient interface {
	TransactionStream(ctx context.Context, opts ...grpc.CallOption) (TRISANetwork_TransactionStreamClient, error)
}

type tRISANetworkClient struct {
	cc grpc.ClientConnInterface
}

func NewTRISANetworkClient(cc grpc.ClientConnInterface) TRISANetworkClient {
	return &tRISANetworkClient{cc}
}

func (c *tRISANetworkClient) TransactionStream(ctx context.Context, opts ...grpc.CallOption) (TRISANetwork_TransactionStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TRISANetwork_serviceDesc.Streams[0], "/trisa.protocol.v1alpha1.TRISANetwork/TransactionStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &tRISANetworkTransactionStreamClient{stream}
	return x, nil
}

type TRISANetwork_TransactionStreamClient interface {
	Send(*Transaction) error
	Recv() (*Transaction, error)
	grpc.ClientStream
}

type tRISANetworkTransactionStreamClient struct {
	grpc.ClientStream
}

func (x *tRISANetworkTransactionStreamClient) Send(m *Transaction) error {
	return x.ClientStream.SendMsg(m)
}

func (x *tRISANetworkTransactionStreamClient) Recv() (*Transaction, error) {
	m := new(Transaction)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TRISANetworkServer is the server API for TRISANetwork service.
// All implementations must embed UnimplementedTRISANetworkServer
// for forward compatibility
type TRISANetworkServer interface {
	TransactionStream(TRISANetwork_TransactionStreamServer) error
	mustEmbedUnimplementedTRISANetworkServer()
}

// UnimplementedTRISANetworkServer must be embedded to have forward compatible implementations.
type UnimplementedTRISANetworkServer struct {
}

func (UnimplementedTRISANetworkServer) TransactionStream(TRISANetwork_TransactionStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method TransactionStream not implemented")
}
func (UnimplementedTRISANetworkServer) mustEmbedUnimplementedTRISANetworkServer() {}

// UnsafeTRISANetworkServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TRISANetworkServer will
// result in compilation errors.
type UnsafeTRISANetworkServer interface {
	mustEmbedUnimplementedTRISANetworkServer()
}

func RegisterTRISANetworkServer(s grpc.ServiceRegistrar, srv TRISANetworkServer) {
	s.RegisterService(&_TRISANetwork_serviceDesc, srv)
}

func _TRISANetwork_TransactionStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TRISANetworkServer).TransactionStream(&tRISANetworkTransactionStreamServer{stream})
}

type TRISANetwork_TransactionStreamServer interface {
	Send(*Transaction) error
	Recv() (*Transaction, error)
	grpc.ServerStream
}

type tRISANetworkTransactionStreamServer struct {
	grpc.ServerStream
}

func (x *tRISANetworkTransactionStreamServer) Send(m *Transaction) error {
	return x.ServerStream.SendMsg(m)
}

func (x *tRISANetworkTransactionStreamServer) Recv() (*Transaction, error) {
	m := new(Transaction)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _TRISANetwork_serviceDesc = grpc.ServiceDesc{
	ServiceName: "trisa.protocol.v1alpha1.TRISANetwork",
	HandlerType: (*TRISANetworkServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "TransactionStream",
			Handler:       _TRISANetwork_TransactionStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "trisa/protocol/v1alpha1/api.proto",
}
