// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.23.4
// source: rvasp/v1/api.proto

package api

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Describes the current state of a transaction.
type TransactionState int32

const (
	TransactionState_INVALID                TransactionState = 0  // Not a valid transaction state
	TransactionState_AWAITING_REPLY         TransactionState = 1  // (Async) Originator is awaiting a response from the beneficiary
	TransactionState_PENDING_SENT           TransactionState = 2  // (Async) Beneficiary has sent a pending message to the originator
	TransactionState_AWAITING_FULL_TRANSFER TransactionState = 3  // (Async) Beneficiary is awaiting a complete transfer request from the originator
	TransactionState_PENDING_RECEIVED       TransactionState = 4  // (Async) Originator has received a pending message from the beneficiary
	TransactionState_PENDING_ACKNOWLEDGED   TransactionState = 5  // (Async) Beneficiary has acknowledged the originator transaction
	TransactionState_ACCEPTED               TransactionState = 6  // (Async) Originator has received the transaction acknowledgement from the beneficiary
	TransactionState_FAILED                 TransactionState = 7  // The transaction has failed
	TransactionState_EXPIRED                TransactionState = 8  // The asynchronous transaction has expired before completion
	TransactionState_REJECTED               TransactionState = 9  // The transaction has been rejected
	TransactionState_COMPLETED              TransactionState = 10 // The transaction is completed
)

// Enum value maps for TransactionState.
var (
	TransactionState_name = map[int32]string{
		0:  "INVALID",
		1:  "AWAITING_REPLY",
		2:  "PENDING_SENT",
		3:  "AWAITING_FULL_TRANSFER",
		4:  "PENDING_RECEIVED",
		5:  "PENDING_ACKNOWLEDGED",
		6:  "ACCEPTED",
		7:  "FAILED",
		8:  "EXPIRED",
		9:  "REJECTED",
		10: "COMPLETED",
	}
	TransactionState_value = map[string]int32{
		"INVALID":                0,
		"AWAITING_REPLY":         1,
		"PENDING_SENT":           2,
		"AWAITING_FULL_TRANSFER": 3,
		"PENDING_RECEIVED":       4,
		"PENDING_ACKNOWLEDGED":   5,
		"ACCEPTED":               6,
		"FAILED":                 7,
		"EXPIRED":                8,
		"REJECTED":               9,
		"COMPLETED":              10,
	}
)

func (x TransactionState) Enum() *TransactionState {
	p := new(TransactionState)
	*p = x
	return p
}

func (x TransactionState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransactionState) Descriptor() protoreflect.EnumDescriptor {
	return file_rvasp_v1_api_proto_enumTypes[0].Descriptor()
}

func (TransactionState) Type() protoreflect.EnumType {
	return &file_rvasp_v1_api_proto_enumTypes[0]
}

func (x TransactionState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TransactionState.Descriptor instead.
func (TransactionState) EnumDescriptor() ([]byte, []int) {
	return file_rvasp_v1_api_proto_rawDescGZIP(), []int{0}
}

// Specifies the RPC the command is wrapping in the bidirectional stream.
type RPC int32

const (
	RPC_NORPC    RPC = 0
	RPC_TRANSFER RPC = 1
	RPC_ACCOUNT  RPC = 2
)

// Enum value maps for RPC.
var (
	RPC_name = map[int32]string{
		0: "NORPC",
		1: "TRANSFER",
		2: "ACCOUNT",
	}
	RPC_value = map[string]int32{
		"NORPC":    0,
		"TRANSFER": 1,
		"ACCOUNT":  2,
	}
)

func (x RPC) Enum() *RPC {
	p := new(RPC)
	*p = x
	return p
}

func (x RPC) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RPC) Descriptor() protoreflect.EnumDescriptor {
	return file_rvasp_v1_api_proto_enumTypes[1].Descriptor()
}

func (RPC) Type() protoreflect.EnumType {
	return &file_rvasp_v1_api_proto_enumTypes[1]
}

func (x RPC) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RPC.Descriptor instead.
func (RPC) EnumDescriptor() ([]byte, []int) {
	return file_rvasp_v1_api_proto_rawDescGZIP(), []int{1}
}

// Specifies the category the message is related to for rVASP UI colorization
type MessageCategory int32

const (
	MessageCategory_LEDGER     MessageCategory = 0
	MessageCategory_TRISADS    MessageCategory = 1
	MessageCategory_TRISAP2P   MessageCategory = 2
	MessageCategory_BLOCKCHAIN MessageCategory = 3
	MessageCategory_ERROR      MessageCategory = 4
)

// Enum value maps for MessageCategory.
var (
	MessageCategory_name = map[int32]string{
		0: "LEDGER",
		1: "TRISADS",
		2: "TRISAP2P",
		3: "BLOCKCHAIN",
		4: "ERROR",
	}
	MessageCategory_value = map[string]int32{
		"LEDGER":     0,
		"TRISADS":    1,
		"TRISAP2P":   2,
		"BLOCKCHAIN": 3,
		"ERROR":      4,
	}
)

func (x MessageCategory) Enum() *MessageCategory {
	p := new(MessageCategory)
	*p = x
	return p
}

func (x MessageCategory) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MessageCategory) Descriptor() protoreflect.EnumDescriptor {
	return file_rvasp_v1_api_proto_enumTypes[2].Descriptor()
}

func (MessageCategory) Type() protoreflect.EnumType {
	return &file_rvasp_v1_api_proto_enumTypes[2]
}

func (x MessageCategory) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MessageCategory.Descriptor instead.
func (MessageCategory) EnumDescriptor() ([]byte, []int) {
	return file_rvasp_v1_api_proto_rawDescGZIP(), []int{2}
}

// Allows for standardized error handling for demo purposes.
type Error struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *Error) Reset() {
	*x = Error{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rvasp_v1_api_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Error) ProtoMessage() {}

func (x *Error) ProtoReflect() protoreflect.Message {
	mi := &file_rvasp_v1_api_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Error.ProtoReflect.Descriptor instead.
func (*Error) Descriptor() ([]byte, []int) {
	return file_rvasp_v1_api_proto_rawDescGZIP(), []int{0}
}

func (x *Error) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *Error) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// Identity maps a wallet address, email, and VASP provider and is used to store
// originator and beneficiary data as well as the KYC information that is collected
// during the TRISA protocol exchange in JSON format.
type Account struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletAddress string `protobuf:"bytes,1,opt,name=wallet_address,json=walletAddress,proto3" json:"wallet_address,omitempty"`
	Email         string `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
	Provider      string `protobuf:"bytes,3,opt,name=provider,proto3" json:"provider,omitempty"`
}

func (x *Account) Reset() {
	*x = Account{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rvasp_v1_api_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Account) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Account) ProtoMessage() {}

func (x *Account) ProtoReflect() protoreflect.Message {
	mi := &file_rvasp_v1_api_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Account.ProtoReflect.Descriptor instead.
func (*Account) Descriptor() ([]byte, []int) {
	return file_rvasp_v1_api_proto_rawDescGZIP(), []int{1}
}

func (x *Account) GetWalletAddress() string {
	if x != nil {
		return x.WalletAddress
	}
	return ""
}

func (x *Account) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *Account) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

// Describes a simple transaction between an originator and beneficiary.
// NOTE: this is an rVASP-specific transaction that is used for debugging.
type Transaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Originator  *Account         `protobuf:"bytes,1,opt,name=originator,proto3" json:"originator,omitempty"`                       // Source described by wallet address or email of originator
	Beneficiary *Account         `protobuf:"bytes,2,opt,name=beneficiary,proto3" json:"beneficiary,omitempty"`                     // Target described by wallet address or email of beneficiary
	Amount      float32          `protobuf:"fixed32,3,opt,name=amount,proto3" json:"amount,omitempty"`                             // amount of the transaction
	Timestamp   string           `protobuf:"bytes,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                         // timestamp of completion on the account provider side
	EnvelopeId  string           `protobuf:"bytes,5,opt,name=envelope_id,json=envelopeId,proto3" json:"envelope_id,omitempty"`     // envelope ID from TRISA (not included between TRISA peers)
	Identity    string           `protobuf:"bytes,6,opt,name=identity,proto3" json:"identity,omitempty"`                           // identity payload from TRISA (not included between TRISA peers)
	State       TransactionState `protobuf:"varint,7,opt,name=state,proto3,enum=rvasp.v1.TransactionState" json:"state,omitempty"` // state of the transaction
	AssetType   string           `protobuf:"bytes,8,opt,name=asset_type,json=assetType,proto3" json:"asset_type,omitempty"`        // the type of virtual asset (for example, "Bitcoin")
}

func (x *Transaction) Reset() {
	*x = Transaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rvasp_v1_api_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transaction) ProtoMessage() {}

func (x *Transaction) ProtoReflect() protoreflect.Message {
	mi := &file_rvasp_v1_api_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transaction.ProtoReflect.Descriptor instead.
func (*Transaction) Descriptor() ([]byte, []int) {
	return file_rvasp_v1_api_proto_rawDescGZIP(), []int{2}
}

func (x *Transaction) GetOriginator() *Account {
	if x != nil {
		return x.Originator
	}
	return nil
}

func (x *Transaction) GetBeneficiary() *Account {
	if x != nil {
		return x.Beneficiary
	}
	return nil
}

func (x *Transaction) GetAmount() float32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *Transaction) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

func (x *Transaction) GetEnvelopeId() string {
	if x != nil {
		return x.EnvelopeId
	}
	return ""
}

func (x *Transaction) GetIdentity() string {
	if x != nil {
		return x.Identity
	}
	return ""
}

func (x *Transaction) GetState() TransactionState {
	if x != nil {
		return x.State
	}
	return TransactionState_INVALID
}

func (x *Transaction) GetAssetType() string {
	if x != nil {
		return x.AssetType
	}
	return ""
}

// Initiates a transfer from the specified account to the specified wallet address or
// email address for a known wallet at some other rVASP.
type TransferRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Account          string  `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`                                            // email address or crypto wallet of the account to debit
	Beneficiary      string  `protobuf:"bytes,2,opt,name=beneficiary,proto3" json:"beneficiary,omitempty"`                                    // email address or crypto wallet to look up beneficiary with
	Amount           float32 `protobuf:"fixed32,3,opt,name=amount,proto3" json:"amount,omitempty"`                                            // amount to transfer to the beneficiary (will be truncated to 2 decimal points)
	OriginatingVasp  string  `protobuf:"bytes,4,opt,name=originating_vasp,json=originatingVasp,proto3" json:"originating_vasp,omitempty"`     // common name of the originating VASP for demo UI error handling (optional)
	BeneficiaryVasp  string  `protobuf:"bytes,5,opt,name=beneficiary_vasp,json=beneficiaryVasp,proto3" json:"beneficiary_vasp,omitempty"`     // common name of the beneficiary VASP for demo UI error handling or external demo lookup (optional if external_demo is false)
	CheckBeneficiary bool    `protobuf:"varint,6,opt,name=check_beneficiary,json=checkBeneficiary,proto3" json:"check_beneficiary,omitempty"` // if set, confirm that the beneficiary wallet belongs to the beneficiary VASP (optional)
	AssetType        string  `protobuf:"bytes,8,opt,name=asset_type,json=assetType,proto3" json:"asset_type,omitempty"`                       // the type of virtual asset for multi-asset chains
}

func (x *TransferRequest) Reset() {
	*x = TransferRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rvasp_v1_api_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferRequest) ProtoMessage() {}

func (x *TransferRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rvasp_v1_api_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferRequest.ProtoReflect.Descriptor instead.
func (*TransferRequest) Descriptor() ([]byte, []int) {
	return file_rvasp_v1_api_proto_rawDescGZIP(), []int{3}
}

func (x *TransferRequest) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *TransferRequest) GetBeneficiary() string {
	if x != nil {
		return x.Beneficiary
	}
	return ""
}

func (x *TransferRequest) GetAmount() float32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *TransferRequest) GetOriginatingVasp() string {
	if x != nil {
		return x.OriginatingVasp
	}
	return ""
}

func (x *TransferRequest) GetBeneficiaryVasp() string {
	if x != nil {
		return x.BeneficiaryVasp
	}
	return ""
}

func (x *TransferRequest) GetCheckBeneficiary() bool {
	if x != nil {
		return x.CheckBeneficiary
	}
	return false
}

func (x *TransferRequest) GetAssetType() string {
	if x != nil {
		return x.AssetType
	}
	return ""
}

// The transfer reply will contain the details of the transaction initiated or completed
// or an error if there are insufficient funds or the account or beneficiary could not
// be looked up. Errors encountered during the TRISA protocol may also be returned.
type TransferReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error       *Error       `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"` // populated with an error encountered during the transfer or from the response envelope
	Transaction *Transaction `protobuf:"bytes,2,opt,name=transaction,proto3" json:"transaction,omitempty"`
}

func (x *TransferReply) Reset() {
	*x = TransferReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rvasp_v1_api_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferReply) ProtoMessage() {}

func (x *TransferReply) ProtoReflect() protoreflect.Message {
	mi := &file_rvasp_v1_api_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferReply.ProtoReflect.Descriptor instead.
func (*TransferReply) Descriptor() ([]byte, []int) {
	return file_rvasp_v1_api_proto_rawDescGZIP(), []int{4}
}

func (x *TransferReply) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *TransferReply) GetTransaction() *Transaction {
	if x != nil {
		return x.Transaction
	}
	return nil
}

// Account request is used to fetch the status information of the account as well as
// all the transactions associated with the account (unless otherwise requested).
// TODO: implement transaction pagination.
type AccountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Account        string `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`                                      // email address of the account to get information for.
	NoTransactions bool   `protobuf:"varint,2,opt,name=no_transactions,json=noTransactions,proto3" json:"no_transactions,omitempty"` // do not return list of transactions, just status info.
	Page           uint32 `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`                                           // not implemented yet
	PerPage        uint32 `protobuf:"varint,4,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`                      // not implemented yet
}

func (x *AccountRequest) Reset() {
	*x = AccountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rvasp_v1_api_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountRequest) ProtoMessage() {}

func (x *AccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rvasp_v1_api_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountRequest.ProtoReflect.Descriptor instead.
func (*AccountRequest) Descriptor() ([]byte, []int) {
	return file_rvasp_v1_api_proto_rawDescGZIP(), []int{5}
}

func (x *AccountRequest) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *AccountRequest) GetNoTransactions() bool {
	if x != nil {
		return x.NoTransactions
	}
	return false
}

func (x *AccountRequest) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *AccountRequest) GetPerPage() uint32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

// Returns the account information and balance as well as transactions ordered from
// most to least recent. An error is returned if the account cannot be found.
type AccountReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error         *Error         `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"` // Only used in live stream
	Name          string         `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Email         string         `protobuf:"bytes,3,opt,name=email,proto3" json:"email,omitempty"`
	WalletAddress string         `protobuf:"bytes,4,opt,name=wallet_address,json=walletAddress,proto3" json:"wallet_address,omitempty"`
	Balance       float32        `protobuf:"fixed32,5,opt,name=balance,proto3" json:"balance,omitempty"`
	Completed     uint64         `protobuf:"varint,6,opt,name=completed,proto3" json:"completed,omitempty"`
	Pending       uint64         `protobuf:"varint,7,opt,name=pending,proto3" json:"pending,omitempty"`
	Transactions  []*Transaction `protobuf:"bytes,8,rep,name=transactions,proto3" json:"transactions,omitempty"`
}

func (x *AccountReply) Reset() {
	*x = AccountReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rvasp_v1_api_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountReply) ProtoMessage() {}

func (x *AccountReply) ProtoReflect() protoreflect.Message {
	mi := &file_rvasp_v1_api_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountReply.ProtoReflect.Descriptor instead.
func (*AccountReply) Descriptor() ([]byte, []int) {
	return file_rvasp_v1_api_proto_rawDescGZIP(), []int{6}
}

func (x *AccountReply) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *AccountReply) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AccountReply) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *AccountReply) GetWalletAddress() string {
	if x != nil {
		return x.WalletAddress
	}
	return ""
}

func (x *AccountReply) GetBalance() float32 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *AccountReply) GetCompleted() uint64 {
	if x != nil {
		return x.Completed
	}
	return 0
}

func (x *AccountReply) GetPending() uint64 {
	if x != nil {
		return x.Pending
	}
	return 0
}

func (x *AccountReply) GetTransactions() []*Transaction {
	if x != nil {
		return x.Transactions
	}
	return nil
}

// A wrapper for the TransferRequet and AccountRequest RPCs to be sent via streaming.
type Command struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type   RPC    `protobuf:"varint,1,opt,name=type,proto3,enum=rvasp.v1.RPC" json:"type,omitempty"` // what type of command is being sent to the rVASP
	Id     uint64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`                       // client side message id for req/rep tracking
	Client string `protobuf:"bytes,3,opt,name=client,proto3" json:"client,omitempty"`                // unique ID so the rVASP can correctly dispatch messages
	// only one of these fields can be set, and the field that is set should
	// match the RPC type described above.
	//
	// Types that are assignable to Request:
	//
	//	*Command_Transfer
	//	*Command_Account
	Request isCommand_Request `protobuf_oneof:"request"`
}

func (x *Command) Reset() {
	*x = Command{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rvasp_v1_api_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Command) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Command) ProtoMessage() {}

func (x *Command) ProtoReflect() protoreflect.Message {
	mi := &file_rvasp_v1_api_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Command.ProtoReflect.Descriptor instead.
func (*Command) Descriptor() ([]byte, []int) {
	return file_rvasp_v1_api_proto_rawDescGZIP(), []int{7}
}

func (x *Command) GetType() RPC {
	if x != nil {
		return x.Type
	}
	return RPC_NORPC
}

func (x *Command) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Command) GetClient() string {
	if x != nil {
		return x.Client
	}
	return ""
}

func (m *Command) GetRequest() isCommand_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (x *Command) GetTransfer() *TransferRequest {
	if x, ok := x.GetRequest().(*Command_Transfer); ok {
		return x.Transfer
	}
	return nil
}

func (x *Command) GetAccount() *AccountRequest {
	if x, ok := x.GetRequest().(*Command_Account); ok {
		return x.Account
	}
	return nil
}

type isCommand_Request interface {
	isCommand_Request()
}

type Command_Transfer struct {
	Transfer *TransferRequest `protobuf:"bytes,11,opt,name=transfer,proto3,oneof"`
}

type Command_Account struct {
	Account *AccountRequest `protobuf:"bytes,12,opt,name=account,proto3,oneof"`
}

func (*Command_Transfer) isCommand_Request() {}

func (*Command_Account) isCommand_Request() {}

// Message is either a wrapper for a TransferReply or AccountReply RPCs or it is a live
// update message sent from the rVASP to show the communication interactions of the
// InterVASP protocol. If it is a wrapper, then type will be > 0 and the ID will match
// the id of the command request sent by the client. Otherwise both of these fields will
// be zero and the update string will be populated.
type Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type      RPC             `protobuf:"varint,1,opt,name=type,proto3,enum=rvasp.v1.RPC" json:"type,omitempty"`
	Id        uint64          `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Update    string          `protobuf:"bytes,3,opt,name=update,proto3" json:"update,omitempty"`
	Timestamp string          `protobuf:"bytes,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Category  MessageCategory `protobuf:"varint,5,opt,name=category,proto3,enum=rvasp.v1.MessageCategory" json:"category,omitempty"`
	// if type and id are greater than zero, one of these fields will be set, matching
	// the RPC type described above.
	//
	// Types that are assignable to Reply:
	//
	//	*Message_Transfer
	//	*Message_Account
	Reply isMessage_Reply `protobuf_oneof:"reply"`
}

func (x *Message) Reset() {
	*x = Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rvasp_v1_api_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message) ProtoMessage() {}

func (x *Message) ProtoReflect() protoreflect.Message {
	mi := &file_rvasp_v1_api_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message.ProtoReflect.Descriptor instead.
func (*Message) Descriptor() ([]byte, []int) {
	return file_rvasp_v1_api_proto_rawDescGZIP(), []int{8}
}

func (x *Message) GetType() RPC {
	if x != nil {
		return x.Type
	}
	return RPC_NORPC
}

func (x *Message) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Message) GetUpdate() string {
	if x != nil {
		return x.Update
	}
	return ""
}

func (x *Message) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

func (x *Message) GetCategory() MessageCategory {
	if x != nil {
		return x.Category
	}
	return MessageCategory_LEDGER
}

func (m *Message) GetReply() isMessage_Reply {
	if m != nil {
		return m.Reply
	}
	return nil
}

func (x *Message) GetTransfer() *TransferReply {
	if x, ok := x.GetReply().(*Message_Transfer); ok {
		return x.Transfer
	}
	return nil
}

func (x *Message) GetAccount() *AccountReply {
	if x, ok := x.GetReply().(*Message_Account); ok {
		return x.Account
	}
	return nil
}

type isMessage_Reply interface {
	isMessage_Reply()
}

type Message_Transfer struct {
	Transfer *TransferReply `protobuf:"bytes,11,opt,name=transfer,proto3,oneof"`
}

type Message_Account struct {
	Account *AccountReply `protobuf:"bytes,12,opt,name=account,proto3,oneof"`
}

func (*Message_Transfer) isMessage_Reply() {}

func (*Message_Account) isMessage_Reply() {}

var File_rvasp_v1_api_proto protoreflect.FileDescriptor

var file_rvasp_v1_api_proto_rawDesc = []byte{
	0x0a, 0x12, 0x72, 0x76, 0x61, 0x73, 0x70, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x69, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x72, 0x76, 0x61, 0x73, 0x70, 0x2e, 0x76, 0x31, 0x22, 0x35,
	0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x62, 0x0a, 0x07, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x25, 0x0a, 0x0e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x22, 0xb9, 0x02, 0x0a, 0x0b, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x0a, 0x6f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x72, 0x76, 0x61, 0x73, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x0a, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x33, 0x0a, 0x0b,
	0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x72, 0x76, 0x61, 0x73, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0b, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72,
	0x79, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6e, 0x76, 0x65, 0x6c,
	0x6f, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x6e,
	0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x12, 0x30, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x72, 0x76, 0x61, 0x73, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x87, 0x02, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61,
	0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69,
	0x63, 0x69, 0x61, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x29, 0x0a,
	0x10, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x73,
	0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x73, 0x70, 0x12, 0x29, 0x0a, 0x10, 0x62, 0x65, 0x6e, 0x65,
	0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79, 0x5f, 0x76, 0x61, 0x73, 0x70, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79, 0x56,
	0x61, 0x73, 0x70, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x62, 0x65, 0x6e,
	0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79,
	0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x73, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22,
	0x6f, 0x0a, 0x0d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x25, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x72, 0x76, 0x61, 0x73, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x37, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x72,
	0x76, 0x61, 0x73, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x82, 0x01, 0x0a, 0x0e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x27, 0x0a,
	0x0f, 0x6e, 0x6f, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x6e, 0x6f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x65,
	0x72, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x65,
	0x72, 0x50, 0x61, 0x67, 0x65, 0x22, 0x93, 0x02, 0x0a, 0x0c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x25, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x72, 0x76, 0x61, 0x73, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x12, 0x39, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x72, 0x76, 0x61, 0x73, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xce, 0x01, 0x0a, 0x07,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x21, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x76, 0x61, 0x73, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x50, 0x43, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x12, 0x37, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x76, 0x61, 0x73, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48,
	0x00, 0x52, 0x08, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x07, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x72,
	0x76, 0x61, 0x73, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x42, 0x09, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x9d, 0x02, 0x0a,
	0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x21, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x72, 0x76, 0x61, 0x73, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x50, 0x43, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x35, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x72, 0x76, 0x61, 0x73, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x08,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x35, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x72, 0x76, 0x61,
	0x73, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x48, 0x00, 0x52, 0x08, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12,
	0x32, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x72, 0x76, 0x61, 0x73, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x48, 0x00, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x2a, 0xd5, 0x01, 0x0a,
	0x10, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x12,
	0x0a, 0x0e, 0x41, 0x57, 0x41, 0x49, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59,
	0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x45,
	0x4e, 0x54, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x41, 0x57, 0x41, 0x49, 0x54, 0x49, 0x4e, 0x47,
	0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x10, 0x03,
	0x12, 0x14, 0x0a, 0x10, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x52, 0x45, 0x43, 0x45,
	0x49, 0x56, 0x45, 0x44, 0x10, 0x04, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e,
	0x47, 0x5f, 0x41, 0x43, 0x4b, 0x4e, 0x4f, 0x57, 0x4c, 0x45, 0x44, 0x47, 0x45, 0x44, 0x10, 0x05,
	0x12, 0x0c, 0x0a, 0x08, 0x41, 0x43, 0x43, 0x45, 0x50, 0x54, 0x45, 0x44, 0x10, 0x06, 0x12, 0x0a,
	0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x07, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x58,
	0x50, 0x49, 0x52, 0x45, 0x44, 0x10, 0x08, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x4a, 0x45, 0x43,
	0x54, 0x45, 0x44, 0x10, 0x09, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54,
	0x45, 0x44, 0x10, 0x0a, 0x2a, 0x2b, 0x0a, 0x03, 0x52, 0x50, 0x43, 0x12, 0x09, 0x0a, 0x05, 0x4e,
	0x4f, 0x52, 0x50, 0x43, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46,
	0x45, 0x52, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10,
	0x02, 0x2a, 0x53, 0x0a, 0x0f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x12, 0x0a, 0x0a, 0x06, 0x4c, 0x45, 0x44, 0x47, 0x45, 0x52, 0x10, 0x00,
	0x12, 0x0b, 0x0a, 0x07, 0x54, 0x52, 0x49, 0x53, 0x41, 0x44, 0x53, 0x10, 0x01, 0x12, 0x0c, 0x0a,
	0x08, 0x54, 0x52, 0x49, 0x53, 0x41, 0x50, 0x32, 0x50, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x42,
	0x4c, 0x4f, 0x43, 0x4b, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x10, 0x04, 0x32, 0x44, 0x0a, 0x09, 0x54, 0x52, 0x49, 0x53, 0x41, 0x44,
	0x65, 0x6d, 0x6f, 0x12, 0x37, 0x0a, 0x0b, 0x4c, 0x69, 0x76, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x73, 0x12, 0x11, 0x2e, 0x72, 0x76, 0x61, 0x73, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x1a, 0x11, 0x2e, 0x72, 0x76, 0x61, 0x73, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x28, 0x01, 0x30, 0x01, 0x32, 0x95, 0x01, 0x0a,
	0x10, 0x54, 0x52, 0x49, 0x53, 0x41, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x3e, 0x0a, 0x08, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x19, 0x2e,
	0x72, 0x76, 0x61, 0x73, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x72, 0x76, 0x61, 0x73, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x41, 0x0a, 0x0d, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x18, 0x2e, 0x72, 0x76, 0x61, 0x73, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x72,
	0x76, 0x61, 0x73, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x42, 0x34, 0x5a, 0x32, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x74, 0x72, 0x69, 0x73, 0x61, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2f, 0x74,
	0x65, 0x73, 0x74, 0x6e, 0x65, 0x74, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x72, 0x76, 0x61, 0x73, 0x70,
	0x2f, 0x70, 0x62, 0x2f, 0x76, 0x31, 0x3b, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_rvasp_v1_api_proto_rawDescOnce sync.Once
	file_rvasp_v1_api_proto_rawDescData = file_rvasp_v1_api_proto_rawDesc
)

func file_rvasp_v1_api_proto_rawDescGZIP() []byte {
	file_rvasp_v1_api_proto_rawDescOnce.Do(func() {
		file_rvasp_v1_api_proto_rawDescData = protoimpl.X.CompressGZIP(file_rvasp_v1_api_proto_rawDescData)
	})
	return file_rvasp_v1_api_proto_rawDescData
}

var file_rvasp_v1_api_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_rvasp_v1_api_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_rvasp_v1_api_proto_goTypes = []interface{}{
	(TransactionState)(0),   // 0: rvasp.v1.TransactionState
	(RPC)(0),                // 1: rvasp.v1.RPC
	(MessageCategory)(0),    // 2: rvasp.v1.MessageCategory
	(*Error)(nil),           // 3: rvasp.v1.Error
	(*Account)(nil),         // 4: rvasp.v1.Account
	(*Transaction)(nil),     // 5: rvasp.v1.Transaction
	(*TransferRequest)(nil), // 6: rvasp.v1.TransferRequest
	(*TransferReply)(nil),   // 7: rvasp.v1.TransferReply
	(*AccountRequest)(nil),  // 8: rvasp.v1.AccountRequest
	(*AccountReply)(nil),    // 9: rvasp.v1.AccountReply
	(*Command)(nil),         // 10: rvasp.v1.Command
	(*Message)(nil),         // 11: rvasp.v1.Message
}
var file_rvasp_v1_api_proto_depIdxs = []int32{
	4,  // 0: rvasp.v1.Transaction.originator:type_name -> rvasp.v1.Account
	4,  // 1: rvasp.v1.Transaction.beneficiary:type_name -> rvasp.v1.Account
	0,  // 2: rvasp.v1.Transaction.state:type_name -> rvasp.v1.TransactionState
	3,  // 3: rvasp.v1.TransferReply.error:type_name -> rvasp.v1.Error
	5,  // 4: rvasp.v1.TransferReply.transaction:type_name -> rvasp.v1.Transaction
	3,  // 5: rvasp.v1.AccountReply.error:type_name -> rvasp.v1.Error
	5,  // 6: rvasp.v1.AccountReply.transactions:type_name -> rvasp.v1.Transaction
	1,  // 7: rvasp.v1.Command.type:type_name -> rvasp.v1.RPC
	6,  // 8: rvasp.v1.Command.transfer:type_name -> rvasp.v1.TransferRequest
	8,  // 9: rvasp.v1.Command.account:type_name -> rvasp.v1.AccountRequest
	1,  // 10: rvasp.v1.Message.type:type_name -> rvasp.v1.RPC
	2,  // 11: rvasp.v1.Message.category:type_name -> rvasp.v1.MessageCategory
	7,  // 12: rvasp.v1.Message.transfer:type_name -> rvasp.v1.TransferReply
	9,  // 13: rvasp.v1.Message.account:type_name -> rvasp.v1.AccountReply
	10, // 14: rvasp.v1.TRISADemo.LiveUpdates:input_type -> rvasp.v1.Command
	6,  // 15: rvasp.v1.TRISAIntegration.Transfer:input_type -> rvasp.v1.TransferRequest
	8,  // 16: rvasp.v1.TRISAIntegration.AccountStatus:input_type -> rvasp.v1.AccountRequest
	11, // 17: rvasp.v1.TRISADemo.LiveUpdates:output_type -> rvasp.v1.Message
	7,  // 18: rvasp.v1.TRISAIntegration.Transfer:output_type -> rvasp.v1.TransferReply
	9,  // 19: rvasp.v1.TRISAIntegration.AccountStatus:output_type -> rvasp.v1.AccountReply
	17, // [17:20] is the sub-list for method output_type
	14, // [14:17] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_rvasp_v1_api_proto_init() }
func file_rvasp_v1_api_proto_init() {
	if File_rvasp_v1_api_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_rvasp_v1_api_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Error); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rvasp_v1_api_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Account); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rvasp_v1_api_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rvasp_v1_api_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rvasp_v1_api_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rvasp_v1_api_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rvasp_v1_api_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rvasp_v1_api_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Command); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rvasp_v1_api_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_rvasp_v1_api_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*Command_Transfer)(nil),
		(*Command_Account)(nil),
	}
	file_rvasp_v1_api_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*Message_Transfer)(nil),
		(*Message_Account)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_rvasp_v1_api_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_rvasp_v1_api_proto_goTypes,
		DependencyIndexes: file_rvasp_v1_api_proto_depIdxs,
		EnumInfos:         file_rvasp_v1_api_proto_enumTypes,
		MessageInfos:      file_rvasp_v1_api_proto_msgTypes,
	}.Build()
	File_rvasp_v1_api_proto = out.File
	file_rvasp_v1_api_proto_rawDesc = nil
	file_rvasp_v1_api_proto_goTypes = nil
	file_rvasp_v1_api_proto_depIdxs = nil
}
