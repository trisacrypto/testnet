syntax = "proto3";

package trisa.protocol.v1alpha1;
option go_package = "github.com/trisacrypto/testnet/pkg/trisa/protocol/v1alpha1";

import "google/protobuf/any.proto";
import "trisa/protocol/v1alpha1/errors.proto";

service TRISANetwork {
    rpc TransactionStream(stream Transaction) returns (stream Transaction) {}
}

message Transaction {
    // The transaction identifier generated by the sender. Any response
    // to a transaction request needs to carry the same identifier.
    string id = 1;

    // If an error occurred during the processing of the transaction.
    Error error = 2;

    // Encrypted TransactionData
    bytes transaction = 3;

    // Encryption key used to encrypt the transaction blob. This key itself
    // is encrypted using the public key of the receiver.
    bytes encryption_key = 4;

    // The encryption algorithm used to encrypt the transaction blob.
    string encryption_algorithm = 5;

    // HMAC signature calculated from encrypted transaction blob.
    bytes hmac = 6;

    // The HMAC secret used to calculate the HMAC signature. This secret
    // itself is encrypted using the public key of the receiver.
    bytes hmac_secret = 7;

    // The algorithm used to calculate the HMAC signature.
    string hmac_algorithm = 8;
}

message TransactionData {
    // Identity contains any valid identity structure.
    google.protobuf.Any identity = 1;

    // Data contains the network specific data.
    google.protobuf.Any data = 2;
}