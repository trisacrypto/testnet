syntax = "proto3";

package trisa.protocol.v1alpha1;
option go_package = "github.com/trisacrypto/testnet/pkg/trisa/protocol/v1alpha1";

import "google/protobuf/any.proto";


message Error {
    enum Code {
        // Errors 0-49 are reserved for service-specific errors
        // Default error - something very bad happened.
        UNHANDLED = 0;

        // Generic error - could not handle request, retry later.
        UNAVAILABLE = 1;

        // Request could not be processed by recipient.
        INTERNAL_ERROR = 2;

        // Errors 50-99 are reserved for transaction rejections.
        // Default rejection - no specified reason for rejecting the transaction.
        REJECTED = 50;

        // VASP does not control the specified wallet address.
        UNKNOWN_WALLET_ADDRESS = 51;

        // VASP does not have KYC information for the specified wallet address.
        UNKOWN_IDENTITY = 52;

        // Specifically, the Originator account cannot be identified
        UNKNOWN_ORIGINATOR = 53;

        // Specifically, the Beneficiary account cannot be identified
        UNKOWN_BENEFICIARY = 54;

        // Wallet address or transaction is not available on this network.
        OUT_OF_NETWORK = 97;

        // VASP not able to implement travel rule compliance.
        NO_COMPLIANCE = 98;

        // VASP unwilling to conduct the transaction because of a risk assessment.
        HIGH_RISK = 99;

        // Errors 100-149 are reserved for authentication or cryptography failures.
        // Default access denied - no specified reason for forbidding the transaction.
        FORBIDDEN = 100;

        // Could not sign transaction because no signing key is available.
        NO_SIGNING_KEY = 101;

        // Could not sign transaction because keys have been revoked.
        CERTIFICATE_REVOKED = 102;

        // Could not verify certificates with any certificate authority.
        UNVERIFIED = 103;

        // A trusted connection could not be established.
        UNTRUSTED = 104;

        // An HMAC signature could not be verified
        INVALID_SIGNATURE = 105;

        // The transaction bundle cannot be decrypted with the specified key
        INVALID_KEY = 106;

        // Errors 150-199 are reserved for repairing exchange information.
        // Generic bad request - usually implies retry when reuqest is fixed.
        BAD_REQUEST = 150;

        // Could not parse the identity record; specify the type in extra
        UNPARSEABLE_IDENTITY = 151;

        // Could not parse the transaction data record; specify the type in extra
        UNPARSEABLE_TRANSACTION = 152;

        // There are missing required fields in the transaction data, a list of these
        // fields is specified in extra.
        MISSING_FIELDS = 153;

        // The identity record is not complete enough for compliance purposes of the
        // receiving VASPs. Required fields or format specified in extra.
        INCOMPLETE_IDENTITY = 154;

        // There was an error validating a field in the transaction data (specified in extra)
        VALIDATION_ERROR = 155;
    }

    // Error codes are standardized in the TRISA network to prevent confusion and to
    // allow easy identification of rejections or other problems so that the repair of
    // the connection or information exchange can be expedited.
    Code code = 1;

    // Human readable message stating the reason for the error, should be loggable and
    // actionable. Both standardized and unique/detail messages are acceptable.
    string message = 2;

    // If the message that caused the error should be retried with a fix; otherwise the
    // rejection is permenant and the request should not be retried.
    bool retry = 3;

    // Any additional data or reasons for the rejection, e.g. a parent error, a diff,
    // a location for redirect, etc. The payload of the additional data should be
    // described by the error code.
    google.protobuf.Any extra = 4;
}

