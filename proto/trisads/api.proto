syntax = "proto3";

package trisads;
option go_package = "github.com/trisacrypto/testnet/pkg/trisads/pb";

import "ivms101/ivms101.proto";
import "trisads/models.proto";
import "trisads/ca.proto";

service TRISADirectory {
    rpc Register(RegisterRequest) returns (RegisterReply) {}
    rpc Lookup(LookupRequest) returns (LookupReply) {}
    rpc Search(SearchRequest) returns (SearchReply) {}
    rpc Status(StatusRequest) returns (StatusReply) {}
    rpc VerifyEmail(VerifyEmailRequest) returns (VerifyEmailReply) {}
}


message Error {
    int32 code = 1;
    string message = 2;
}

// Registration requests are validated that they contain correct information and then
// are sent through the verification process, creating or updating a VASP as needed.
message RegisterRequest {
    // The legal entity IVMS 101 data for VASP KYC information exchange. This is the
    // IVMS 101 data that should be exchanged in the TRISA P2P protocol as the
    // Originator, Intermediate, or Beneficiary VASP fields. A complete and valid
    // identity record with country of registration is required.
    ivms101.LegalPerson entity = 1;

    // Technical, legal, billing, and administrative contacts for the VASP.
    Contacts contacts = 2;

    // Travel Rule Implementation Endpoint - where other TRISA peers should connect.
    // This should be an addr:port combination, e.g. trisa.vaspbot.net:443
    string trisa_endpoint = 3;

    // Common name should be the VASP domain name to issue certificates for, which
    // should match the domain in the trisa_endpoint. If this field is omitted, the
    // common name is inferred from the trisa_endpoint.
    string common_name = 4;

    // Business Information
    string website = 5;
    BusinessCategory business_category = 6;
    VASPCategory vasp_category = 7;
    string established_on = 8; // Should be a date in YYYY-MM-DD format

    // TRIXO Questionnaire
    TRIXOQuestionnaire trixo = 9;
}

message RegisterReply {
    // If the registration was successful, no error will be returned
    Error error = 1;

    // Unique identifiers for the VASP created by the registration.
    // Use these identifiers for status lookup requests and any follow-on interactions.
    string id = 2;
    string registered_directory = 3;
    string common_name = 4;

    // The verification status of the VASP entity.
    VerificationState status = 5;
    string message = 6;
}

// Lookup VASP certification information either by their unique ID or by the domain of
// the TRISA implementation endpoint, which should be the common name of the certificate.
// Note that if both id and common name are supplied, ID is prioritized.
message LookupRequest {
    // Unique identifier generated by the directory service, most common lookup field.
    string id = 1;

    // The URL of the directory that registered the VASP. If ommitted, it is assumed
    // that the directory being queried is the registering VASP.
    string registered_directory = 2;

    // The common name of the certificate, e.g. the domain name of the TRISA endpoint.
    // To use other name fields such as the legal business name, you must use search.
    string common_name = 3;
}

// Summary information is given in return for VASP lookups as lookups are primarily
// intended to facilitate P2P verification and public key exchange.
// NOTE: only verified VASPs are returned using the lookup RPC.
message LookupReply {
    // If no error is specified, the lookup was successful
    Error error = 1;

    // The uniquely identifying components of the VASP in the directory service
    string id = 2;
    string registered_directory = 3;
    string common_name = 4;

    // The endpoint to connect to for the TRISA P2P protocol (addr:port)
    string endpoint = 5;

    // The Certificate information if the VASP is available and verified
    Certificate certificate = 6;

    // Other VASP information that faciliates P2P exchanges
    string name = 7;
    string country = 8;
    string verified_on = 9;
}

// Search requests allow a more flexibly field serach to identify a VASP, these requests
// are primarily used to locate a beneficiary VASP in order to begin the TRISA P2P protocol.
// NOTE: only verified VASPs are returned using the search RPC.
message SearchRequest {
    // Search the legal names of the VASP (case insensitive)
    repeated string name = 1;

    // Filter the search by a specific country or countries
    repeated string country = 2;
}

message SearchReply {
    // If no error is specified, the search was successful, even if no results returned.
    Error error = 1;
    repeated SearchResult results = 2;
}

message SearchResult {
    // The uniquely identifying components of the VASP in the directory service
    string id = 1;
    string registered_directory = 2;
    string common_name = 3;
}

// Check on the status of a VASP including its verification status and the service
// status if the TRISA directory service performs health check monitoring. The same
// parameters as the Lookup RPC are sent, but note that a TRISA directory service may
// refuse to return all or part of the status request.
message StatusRequest {
    // Unique identifier generated by the directory service, most common lookup field.
    string id = 1;

    // The URL of the directory that registered the VASP. If ommitted, it is assumed
    // that the directory being queried is the registering VASP.
    string registered_directory = 2;

    // The common name of the certificate, e.g. the domain name of the TRISA endpoint.
    // To use other name fields such as the legal business name, you must use search.
    string common_name = 3;
}

message StatusReply {
    // If no error is specified, the status request was successful.
    Error error = 1;

    // Status information
    VerificationState verification_status = 2;
    ServiceState service_status = 3;
    string verified_on = 4;  // Should be an RFC 3339 Timestamp
    string first_listed = 5; // Should be an RFC 3339 Timestamp
    string last_updated = 6; // Should be an RFC 3339 Timestamp
}

message VerifyEmailRequest {
    string id = 1;
    string token = 2;
}

message VerifyEmailReply {
    // If no error is specified, the verify email request was successful
    Error error = 1;

    // The verification status of the VASP entity.
    VerificationState status = 2;
    string message = 3;

    // Used to decrypt the emailed certificates in PKCS 12 format
    string pkcs12password = 4;
}