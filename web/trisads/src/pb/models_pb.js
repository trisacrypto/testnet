// source: models.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.pb.Entity', null, global);
goog.exportSymbol('proto.pb.Name', null, global);
goog.exportSymbol('proto.pb.PublicKeyInfo', null, global);
goog.exportSymbol('proto.pb.TRISACertification', null, global);
goog.exportSymbol('proto.pb.VASP', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.VASP = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.VASP, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.VASP.displayName = 'proto.pb.VASP';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.Entity = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.Entity, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.Entity.displayName = 'proto.pb.Entity';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.TRISACertification = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pb.TRISACertification.repeatedFields_, null);
};
goog.inherits(proto.pb.TRISACertification, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.TRISACertification.displayName = 'proto.pb.TRISACertification';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.Name = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.Name, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.Name.displayName = 'proto.pb.Name';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.PublicKeyInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pb.PublicKeyInfo.repeatedFields_, null);
};
goog.inherits(proto.pb.PublicKeyInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.PublicKeyInfo.displayName = 'proto.pb.PublicKeyInfo';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.VASP.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.VASP.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.VASP} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.VASP.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    vaspentity: (f = msg.getVaspentity()) && proto.pb.Entity.toObject(includeInstance, f),
    vasptrisacertification: (f = msg.getVasptrisacertification()) && proto.pb.TRISACertification.toObject(includeInstance, f),
    firstlisted: jspb.Message.getFieldWithDefault(msg, 4, ""),
    lastupdated: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.VASP}
 */
proto.pb.VASP.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.VASP;
  return proto.pb.VASP.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.VASP} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.VASP}
 */
proto.pb.VASP.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setId(value);
      break;
    case 2:
      var value = new proto.pb.Entity;
      reader.readMessage(value,proto.pb.Entity.deserializeBinaryFromReader);
      msg.setVaspentity(value);
      break;
    case 3:
      var value = new proto.pb.TRISACertification;
      reader.readMessage(value,proto.pb.TRISACertification.deserializeBinaryFromReader);
      msg.setVasptrisacertification(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setFirstlisted(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setLastupdated(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.VASP.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.VASP.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.VASP} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.VASP.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getVaspentity();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.pb.Entity.serializeBinaryToWriter
    );
  }
  f = message.getVasptrisacertification();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.pb.TRISACertification.serializeBinaryToWriter
    );
  }
  f = message.getFirstlisted();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getLastupdated();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional uint64 id = 1;
 * @return {number}
 */
proto.pb.VASP.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.VASP} returns this
 */
proto.pb.VASP.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional Entity vaspEntity = 2;
 * @return {?proto.pb.Entity}
 */
proto.pb.VASP.prototype.getVaspentity = function() {
  return /** @type{?proto.pb.Entity} */ (
    jspb.Message.getWrapperField(this, proto.pb.Entity, 2));
};


/**
 * @param {?proto.pb.Entity|undefined} value
 * @return {!proto.pb.VASP} returns this
*/
proto.pb.VASP.prototype.setVaspentity = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pb.VASP} returns this
 */
proto.pb.VASP.prototype.clearVaspentity = function() {
  return this.setVaspentity(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pb.VASP.prototype.hasVaspentity = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional TRISACertification vaspTRISACertification = 3;
 * @return {?proto.pb.TRISACertification}
 */
proto.pb.VASP.prototype.getVasptrisacertification = function() {
  return /** @type{?proto.pb.TRISACertification} */ (
    jspb.Message.getWrapperField(this, proto.pb.TRISACertification, 3));
};


/**
 * @param {?proto.pb.TRISACertification|undefined} value
 * @return {!proto.pb.VASP} returns this
*/
proto.pb.VASP.prototype.setVasptrisacertification = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pb.VASP} returns this
 */
proto.pb.VASP.prototype.clearVasptrisacertification = function() {
  return this.setVasptrisacertification(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pb.VASP.prototype.hasVasptrisacertification = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string firstListed = 4;
 * @return {string}
 */
proto.pb.VASP.prototype.getFirstlisted = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.pb.VASP} returns this
 */
proto.pb.VASP.prototype.setFirstlisted = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string lastUpdated = 5;
 * @return {string}
 */
proto.pb.VASP.prototype.getLastupdated = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.pb.VASP} returns this
 */
proto.pb.VASP.prototype.setLastupdated = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.Entity.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.Entity.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.Entity} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.Entity.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    vaspfulllegalname: jspb.Message.getFieldWithDefault(msg, 2, ""),
    vaspfulllegaladdress: jspb.Message.getFieldWithDefault(msg, 3, ""),
    vaspincorporationdate: jspb.Message.getFieldWithDefault(msg, 4, ""),
    vaspincorporationnumber: jspb.Message.getFieldWithDefault(msg, 5, ""),
    vaspleinumber: jspb.Message.getFieldWithDefault(msg, 6, ""),
    vaspcontactemail: jspb.Message.getFieldWithDefault(msg, 7, ""),
    vaspurl: jspb.Message.getFieldWithDefault(msg, 8, ""),
    vaspcategory: jspb.Message.getFieldWithDefault(msg, 9, ""),
    vaspcountry: jspb.Message.getFieldWithDefault(msg, 10, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.Entity}
 */
proto.pb.Entity.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.Entity;
  return proto.pb.Entity.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.Entity} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.Entity}
 */
proto.pb.Entity.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setVaspfulllegalname(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setVaspfulllegaladdress(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setVaspincorporationdate(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setVaspincorporationnumber(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setVaspleinumber(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setVaspcontactemail(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setVaspurl(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setVaspcategory(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setVaspcountry(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.Entity.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.Entity.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.Entity} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.Entity.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getVaspfulllegalname();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getVaspfulllegaladdress();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getVaspincorporationdate();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getVaspincorporationnumber();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getVaspleinumber();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getVaspcontactemail();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getVaspurl();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getVaspcategory();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getVaspcountry();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
};


/**
 * optional uint64 id = 1;
 * @return {number}
 */
proto.pb.Entity.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.Entity} returns this
 */
proto.pb.Entity.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string vaspFullLegalName = 2;
 * @return {string}
 */
proto.pb.Entity.prototype.getVaspfulllegalname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.pb.Entity} returns this
 */
proto.pb.Entity.prototype.setVaspfulllegalname = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string vaspFullLegalAddress = 3;
 * @return {string}
 */
proto.pb.Entity.prototype.getVaspfulllegaladdress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.pb.Entity} returns this
 */
proto.pb.Entity.prototype.setVaspfulllegaladdress = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string vaspIncorporationDate = 4;
 * @return {string}
 */
proto.pb.Entity.prototype.getVaspincorporationdate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.pb.Entity} returns this
 */
proto.pb.Entity.prototype.setVaspincorporationdate = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string vaspIncorporationNumber = 5;
 * @return {string}
 */
proto.pb.Entity.prototype.getVaspincorporationnumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.pb.Entity} returns this
 */
proto.pb.Entity.prototype.setVaspincorporationnumber = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string vaspLEINumber = 6;
 * @return {string}
 */
proto.pb.Entity.prototype.getVaspleinumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.pb.Entity} returns this
 */
proto.pb.Entity.prototype.setVaspleinumber = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string vaspContactEmail = 7;
 * @return {string}
 */
proto.pb.Entity.prototype.getVaspcontactemail = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.pb.Entity} returns this
 */
proto.pb.Entity.prototype.setVaspcontactemail = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string vaspURL = 8;
 * @return {string}
 */
proto.pb.Entity.prototype.getVaspurl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.pb.Entity} returns this
 */
proto.pb.Entity.prototype.setVaspurl = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string vaspCategory = 9;
 * @return {string}
 */
proto.pb.Entity.prototype.getVaspcategory = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.pb.Entity} returns this
 */
proto.pb.Entity.prototype.setVaspcategory = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string vaspCountry = 10;
 * @return {string}
 */
proto.pb.Entity.prototype.getVaspcountry = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.pb.Entity} returns this
 */
proto.pb.Entity.prototype.setVaspcountry = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pb.TRISACertification.repeatedFields_ = [7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.TRISACertification.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.TRISACertification.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.TRISACertification} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.TRISACertification.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    subjectname: (f = msg.getSubjectname()) && proto.pb.Name.toObject(includeInstance, f),
    issuername: (f = msg.getIssuername()) && proto.pb.Name.toObject(includeInstance, f),
    serialnumber: msg.getSerialnumber_asB64(),
    version: jspb.Message.getFieldWithDefault(msg, 5, ""),
    signaturealgorithm: jspb.Message.getFieldWithDefault(msg, 6, ""),
    parametersList: (f = jspb.Message.getRepeatedField(msg, 7)) == null ? undefined : f,
    notvalidbefore: jspb.Message.getFieldWithDefault(msg, 8, ""),
    notvalidafter: jspb.Message.getFieldWithDefault(msg, 9, ""),
    publickeyinfo: (f = msg.getPublickeyinfo()) && proto.pb.PublicKeyInfo.toObject(includeInstance, f),
    revoked: jspb.Message.getBooleanFieldWithDefault(msg, 11, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.TRISACertification}
 */
proto.pb.TRISACertification.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.TRISACertification;
  return proto.pb.TRISACertification.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.TRISACertification} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.TRISACertification}
 */
proto.pb.TRISACertification.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setId(value);
      break;
    case 2:
      var value = new proto.pb.Name;
      reader.readMessage(value,proto.pb.Name.deserializeBinaryFromReader);
      msg.setSubjectname(value);
      break;
    case 3:
      var value = new proto.pb.Name;
      reader.readMessage(value,proto.pb.Name.deserializeBinaryFromReader);
      msg.setIssuername(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSerialnumber(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setVersion(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setSignaturealgorithm(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.addParameters(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setNotvalidbefore(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setNotvalidafter(value);
      break;
    case 10:
      var value = new proto.pb.PublicKeyInfo;
      reader.readMessage(value,proto.pb.PublicKeyInfo.deserializeBinaryFromReader);
      msg.setPublickeyinfo(value);
      break;
    case 11:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setRevoked(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.TRISACertification.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.TRISACertification.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.TRISACertification} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.TRISACertification.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getSubjectname();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.pb.Name.serializeBinaryToWriter
    );
  }
  f = message.getIssuername();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.pb.Name.serializeBinaryToWriter
    );
  }
  f = message.getSerialnumber_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getVersion();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getSignaturealgorithm();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getParametersList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      7,
      f
    );
  }
  f = message.getNotvalidbefore();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getNotvalidafter();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getPublickeyinfo();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.pb.PublicKeyInfo.serializeBinaryToWriter
    );
  }
  f = message.getRevoked();
  if (f) {
    writer.writeBool(
      11,
      f
    );
  }
};


/**
 * optional uint64 id = 1;
 * @return {number}
 */
proto.pb.TRISACertification.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.TRISACertification} returns this
 */
proto.pb.TRISACertification.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional Name subjectName = 2;
 * @return {?proto.pb.Name}
 */
proto.pb.TRISACertification.prototype.getSubjectname = function() {
  return /** @type{?proto.pb.Name} */ (
    jspb.Message.getWrapperField(this, proto.pb.Name, 2));
};


/**
 * @param {?proto.pb.Name|undefined} value
 * @return {!proto.pb.TRISACertification} returns this
*/
proto.pb.TRISACertification.prototype.setSubjectname = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pb.TRISACertification} returns this
 */
proto.pb.TRISACertification.prototype.clearSubjectname = function() {
  return this.setSubjectname(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pb.TRISACertification.prototype.hasSubjectname = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Name issuerName = 3;
 * @return {?proto.pb.Name}
 */
proto.pb.TRISACertification.prototype.getIssuername = function() {
  return /** @type{?proto.pb.Name} */ (
    jspb.Message.getWrapperField(this, proto.pb.Name, 3));
};


/**
 * @param {?proto.pb.Name|undefined} value
 * @return {!proto.pb.TRISACertification} returns this
*/
proto.pb.TRISACertification.prototype.setIssuername = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pb.TRISACertification} returns this
 */
proto.pb.TRISACertification.prototype.clearIssuername = function() {
  return this.setIssuername(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pb.TRISACertification.prototype.hasIssuername = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bytes serialNumber = 4;
 * @return {string}
 */
proto.pb.TRISACertification.prototype.getSerialnumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes serialNumber = 4;
 * This is a type-conversion wrapper around `getSerialnumber()`
 * @return {string}
 */
proto.pb.TRISACertification.prototype.getSerialnumber_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSerialnumber()));
};


/**
 * optional bytes serialNumber = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSerialnumber()`
 * @return {!Uint8Array}
 */
proto.pb.TRISACertification.prototype.getSerialnumber_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSerialnumber()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.pb.TRISACertification} returns this
 */
proto.pb.TRISACertification.prototype.setSerialnumber = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional string version = 5;
 * @return {string}
 */
proto.pb.TRISACertification.prototype.getVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.pb.TRISACertification} returns this
 */
proto.pb.TRISACertification.prototype.setVersion = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string signatureAlgorithm = 6;
 * @return {string}
 */
proto.pb.TRISACertification.prototype.getSignaturealgorithm = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.pb.TRISACertification} returns this
 */
proto.pb.TRISACertification.prototype.setSignaturealgorithm = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * repeated string parameters = 7;
 * @return {!Array<string>}
 */
proto.pb.TRISACertification.prototype.getParametersList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 7));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.pb.TRISACertification} returns this
 */
proto.pb.TRISACertification.prototype.setParametersList = function(value) {
  return jspb.Message.setField(this, 7, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.pb.TRISACertification} returns this
 */
proto.pb.TRISACertification.prototype.addParameters = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 7, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pb.TRISACertification} returns this
 */
proto.pb.TRISACertification.prototype.clearParametersList = function() {
  return this.setParametersList([]);
};


/**
 * optional string notValidBefore = 8;
 * @return {string}
 */
proto.pb.TRISACertification.prototype.getNotvalidbefore = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.pb.TRISACertification} returns this
 */
proto.pb.TRISACertification.prototype.setNotvalidbefore = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string notValidAfter = 9;
 * @return {string}
 */
proto.pb.TRISACertification.prototype.getNotvalidafter = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.pb.TRISACertification} returns this
 */
proto.pb.TRISACertification.prototype.setNotvalidafter = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional PublicKeyInfo PublicKeyInfo = 10;
 * @return {?proto.pb.PublicKeyInfo}
 */
proto.pb.TRISACertification.prototype.getPublickeyinfo = function() {
  return /** @type{?proto.pb.PublicKeyInfo} */ (
    jspb.Message.getWrapperField(this, proto.pb.PublicKeyInfo, 10));
};


/**
 * @param {?proto.pb.PublicKeyInfo|undefined} value
 * @return {!proto.pb.TRISACertification} returns this
*/
proto.pb.TRISACertification.prototype.setPublickeyinfo = function(value) {
  return jspb.Message.setWrapperField(this, 10, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pb.TRISACertification} returns this
 */
proto.pb.TRISACertification.prototype.clearPublickeyinfo = function() {
  return this.setPublickeyinfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pb.TRISACertification.prototype.hasPublickeyinfo = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional bool revoked = 11;
 * @return {boolean}
 */
proto.pb.TRISACertification.prototype.getRevoked = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 11, false));
};


/**
 * @param {boolean} value
 * @return {!proto.pb.TRISACertification} returns this
 */
proto.pb.TRISACertification.prototype.setRevoked = function(value) {
  return jspb.Message.setProto3BooleanField(this, 11, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.Name.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.Name.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.Name} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.Name.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    commonname: jspb.Message.getFieldWithDefault(msg, 2, ""),
    countryregion: jspb.Message.getFieldWithDefault(msg, 3, ""),
    organization: jspb.Message.getFieldWithDefault(msg, 4, ""),
    organizationalunit: jspb.Message.getFieldWithDefault(msg, 5, ""),
    locality: jspb.Message.getFieldWithDefault(msg, 6, ""),
    stateprovince: jspb.Message.getFieldWithDefault(msg, 7, ""),
    serialnumber: jspb.Message.getFieldWithDefault(msg, 8, ""),
    inccountryregion: jspb.Message.getFieldWithDefault(msg, 9, ""),
    incstateprovince: jspb.Message.getFieldWithDefault(msg, 10, ""),
    businesscategory: jspb.Message.getFieldWithDefault(msg, 11, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.Name}
 */
proto.pb.Name.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.Name;
  return proto.pb.Name.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.Name} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.Name}
 */
proto.pb.Name.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCommonname(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setCountryregion(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrganization(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrganizationalunit(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setLocality(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setStateprovince(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setSerialnumber(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setInccountryregion(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setIncstateprovince(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setBusinesscategory(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.Name.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.Name.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.Name} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.Name.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getCommonname();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCountryregion();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getOrganization();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getOrganizationalunit();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getLocality();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getStateprovince();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getSerialnumber();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getInccountryregion();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getIncstateprovince();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getBusinesscategory();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
};


/**
 * optional uint64 id = 1;
 * @return {number}
 */
proto.pb.Name.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.Name} returns this
 */
proto.pb.Name.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string commonName = 2;
 * @return {string}
 */
proto.pb.Name.prototype.getCommonname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.pb.Name} returns this
 */
proto.pb.Name.prototype.setCommonname = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string countryRegion = 3;
 * @return {string}
 */
proto.pb.Name.prototype.getCountryregion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.pb.Name} returns this
 */
proto.pb.Name.prototype.setCountryregion = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string organization = 4;
 * @return {string}
 */
proto.pb.Name.prototype.getOrganization = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.pb.Name} returns this
 */
proto.pb.Name.prototype.setOrganization = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string organizationalUnit = 5;
 * @return {string}
 */
proto.pb.Name.prototype.getOrganizationalunit = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.pb.Name} returns this
 */
proto.pb.Name.prototype.setOrganizationalunit = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string locality = 6;
 * @return {string}
 */
proto.pb.Name.prototype.getLocality = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.pb.Name} returns this
 */
proto.pb.Name.prototype.setLocality = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string stateProvince = 7;
 * @return {string}
 */
proto.pb.Name.prototype.getStateprovince = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.pb.Name} returns this
 */
proto.pb.Name.prototype.setStateprovince = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string serialNumber = 8;
 * @return {string}
 */
proto.pb.Name.prototype.getSerialnumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.pb.Name} returns this
 */
proto.pb.Name.prototype.setSerialnumber = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string incCountryRegion = 9;
 * @return {string}
 */
proto.pb.Name.prototype.getInccountryregion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.pb.Name} returns this
 */
proto.pb.Name.prototype.setInccountryregion = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string incStateProvince = 10;
 * @return {string}
 */
proto.pb.Name.prototype.getIncstateprovince = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.pb.Name} returns this
 */
proto.pb.Name.prototype.setIncstateprovince = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string businessCategory = 11;
 * @return {string}
 */
proto.pb.Name.prototype.getBusinesscategory = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.pb.Name} returns this
 */
proto.pb.Name.prototype.setBusinesscategory = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pb.PublicKeyInfo.repeatedFields_ = [3,7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.PublicKeyInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.PublicKeyInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.PublicKeyInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.PublicKeyInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    algorithm: jspb.Message.getFieldWithDefault(msg, 2, ""),
    parametersList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f,
    publickey: msg.getPublickey_asB64(),
    exponent: jspb.Message.getFieldWithDefault(msg, 5, 0),
    keysize: jspb.Message.getFieldWithDefault(msg, 6, 0),
    keyusageList: (f = jspb.Message.getRepeatedField(msg, 7)) == null ? undefined : f,
    signature: msg.getSignature_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.PublicKeyInfo}
 */
proto.pb.PublicKeyInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.PublicKeyInfo;
  return proto.pb.PublicKeyInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.PublicKeyInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.PublicKeyInfo}
 */
proto.pb.PublicKeyInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAlgorithm(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addParameters(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPublickey(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setExponent(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setKeysize(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.addKeyusage(value);
      break;
    case 8:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSignature(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.PublicKeyInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.PublicKeyInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.PublicKeyInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.PublicKeyInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getAlgorithm();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getParametersList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
  f = message.getPublickey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getExponent();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getKeysize();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = message.getKeyusageList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      7,
      f
    );
  }
  f = message.getSignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      8,
      f
    );
  }
};


/**
 * optional uint64 id = 1;
 * @return {number}
 */
proto.pb.PublicKeyInfo.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.PublicKeyInfo} returns this
 */
proto.pb.PublicKeyInfo.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string algorithm = 2;
 * @return {string}
 */
proto.pb.PublicKeyInfo.prototype.getAlgorithm = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.pb.PublicKeyInfo} returns this
 */
proto.pb.PublicKeyInfo.prototype.setAlgorithm = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated string parameters = 3;
 * @return {!Array<string>}
 */
proto.pb.PublicKeyInfo.prototype.getParametersList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.pb.PublicKeyInfo} returns this
 */
proto.pb.PublicKeyInfo.prototype.setParametersList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.pb.PublicKeyInfo} returns this
 */
proto.pb.PublicKeyInfo.prototype.addParameters = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pb.PublicKeyInfo} returns this
 */
proto.pb.PublicKeyInfo.prototype.clearParametersList = function() {
  return this.setParametersList([]);
};


/**
 * optional bytes publicKey = 4;
 * @return {string}
 */
proto.pb.PublicKeyInfo.prototype.getPublickey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes publicKey = 4;
 * This is a type-conversion wrapper around `getPublickey()`
 * @return {string}
 */
proto.pb.PublicKeyInfo.prototype.getPublickey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPublickey()));
};


/**
 * optional bytes publicKey = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPublickey()`
 * @return {!Uint8Array}
 */
proto.pb.PublicKeyInfo.prototype.getPublickey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPublickey()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.pb.PublicKeyInfo} returns this
 */
proto.pb.PublicKeyInfo.prototype.setPublickey = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional int64 exponent = 5;
 * @return {number}
 */
proto.pb.PublicKeyInfo.prototype.getExponent = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.PublicKeyInfo} returns this
 */
proto.pb.PublicKeyInfo.prototype.setExponent = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int64 keySize = 6;
 * @return {number}
 */
proto.pb.PublicKeyInfo.prototype.getKeysize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.PublicKeyInfo} returns this
 */
proto.pb.PublicKeyInfo.prototype.setKeysize = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * repeated string keyUsage = 7;
 * @return {!Array<string>}
 */
proto.pb.PublicKeyInfo.prototype.getKeyusageList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 7));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.pb.PublicKeyInfo} returns this
 */
proto.pb.PublicKeyInfo.prototype.setKeyusageList = function(value) {
  return jspb.Message.setField(this, 7, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.pb.PublicKeyInfo} returns this
 */
proto.pb.PublicKeyInfo.prototype.addKeyusage = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 7, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pb.PublicKeyInfo} returns this
 */
proto.pb.PublicKeyInfo.prototype.clearKeyusageList = function() {
  return this.setKeyusageList([]);
};


/**
 * optional bytes signature = 8;
 * @return {string}
 */
proto.pb.PublicKeyInfo.prototype.getSignature = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * optional bytes signature = 8;
 * This is a type-conversion wrapper around `getSignature()`
 * @return {string}
 */
proto.pb.PublicKeyInfo.prototype.getSignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSignature()));
};


/**
 * optional bytes signature = 8;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignature()`
 * @return {!Uint8Array}
 */
proto.pb.PublicKeyInfo.prototype.getSignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSignature()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.pb.PublicKeyInfo} returns this
 */
proto.pb.PublicKeyInfo.prototype.setSignature = function(value) {
  return jspb.Message.setProto3BytesField(this, 8, value);
};


goog.object.extend(exports, proto.pb);
