# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import rvaspy.api_pb2 as api__pb2


class TRISADemoStub(object):
    """The TRISA Demo service uses a bidirectional stream to allow a websockets service to
    display messages and commands in real time. Commands implement the same RPCs as the
    TRISA Integration service, using a wrapper format. Messages from the rVASP are sent
    to the UI to show messaging progress.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.LiveUpdates = channel.stream_stream(
                '/pb.TRISADemo/LiveUpdates',
                request_serializer=api__pb2.Command.SerializeToString,
                response_deserializer=api__pb2.Message.FromString,
                )


class TRISADemoServicer(object):
    """The TRISA Demo service uses a bidirectional stream to allow a websockets service to
    display messages and commands in real time. Commands implement the same RPCs as the
    TRISA Integration service, using a wrapper format. Messages from the rVASP are sent
    to the UI to show messaging progress.
    """

    def LiveUpdates(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TRISADemoServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'LiveUpdates': grpc.stream_stream_rpc_method_handler(
                    servicer.LiveUpdates,
                    request_deserializer=api__pb2.Command.FromString,
                    response_serializer=api__pb2.Message.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'pb.TRISADemo', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class TRISADemo(object):
    """The TRISA Demo service uses a bidirectional stream to allow a websockets service to
    display messages and commands in real time. Commands implement the same RPCs as the
    TRISA Integration service, using a wrapper format. Messages from the rVASP are sent
    to the UI to show messaging progress.
    """

    @staticmethod
    def LiveUpdates(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/pb.TRISADemo/LiveUpdates',
            api__pb2.Command.SerializeToString,
            api__pb2.Message.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class TRISAIntegrationStub(object):
    """The TRISA Integration service can be used by VASPs as they develop their own internal
    implementations of the InterVASP protocol. The integration service provides one
    primary RPC - TransferTo, which gets the rVASP to kick off an InterVASP transfer
    request. The rVASP also implements the InterVASP protocol to receive transactions and
    provides a helper RPC, AccountStatus to get back all transactions the rVASP has seen
    for debugging purposes.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Transfer = channel.unary_unary(
                '/pb.TRISAIntegration/Transfer',
                request_serializer=api__pb2.TransferRequest.SerializeToString,
                response_deserializer=api__pb2.TransferReply.FromString,
                )
        self.AccountStatus = channel.unary_unary(
                '/pb.TRISAIntegration/AccountStatus',
                request_serializer=api__pb2.AccountRequest.SerializeToString,
                response_deserializer=api__pb2.AccountReply.FromString,
                )


class TRISAIntegrationServicer(object):
    """The TRISA Integration service can be used by VASPs as they develop their own internal
    implementations of the InterVASP protocol. The integration service provides one
    primary RPC - TransferTo, which gets the rVASP to kick off an InterVASP transfer
    request. The rVASP also implements the InterVASP protocol to receive transactions and
    provides a helper RPC, AccountStatus to get back all transactions the rVASP has seen
    for debugging purposes.
    """

    def Transfer(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AccountStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TRISAIntegrationServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Transfer': grpc.unary_unary_rpc_method_handler(
                    servicer.Transfer,
                    request_deserializer=api__pb2.TransferRequest.FromString,
                    response_serializer=api__pb2.TransferReply.SerializeToString,
            ),
            'AccountStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.AccountStatus,
                    request_deserializer=api__pb2.AccountRequest.FromString,
                    response_serializer=api__pb2.AccountReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'pb.TRISAIntegration', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class TRISAIntegration(object):
    """The TRISA Integration service can be used by VASPs as they develop their own internal
    implementations of the InterVASP protocol. The integration service provides one
    primary RPC - TransferTo, which gets the rVASP to kick off an InterVASP transfer
    request. The rVASP also implements the InterVASP protocol to receive transactions and
    provides a helper RPC, AccountStatus to get back all transactions the rVASP has seen
    for debugging purposes.
    """

    @staticmethod
    def Transfer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pb.TRISAIntegration/Transfer',
            api__pb2.TransferRequest.SerializeToString,
            api__pb2.TransferReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AccountStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pb.TRISAIntegration/AccountStatus',
            api__pb2.AccountRequest.SerializeToString,
            api__pb2.AccountReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
